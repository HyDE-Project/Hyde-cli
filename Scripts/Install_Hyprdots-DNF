#!/bin/env bash

CloneDir=${1:-$HOME/Hyprdots}

barLine="$(printf '=%.0s' $(seq 1 "$(tput cols)"))"
clear
cat << GREET
Cutting-Edge User!
$barLine

$(tput setaf 2)Hello $USER! This is an automated installation for Hyprdots.$(tput sgr0)

Hyprdots-ctl is an active helper for Hyprdots. During this installation, the script will:
1. Check if Hyprdots is already installed.
2. If not, it will clone the Hyprdots repository from GitHub. https://github.com/HyDE-Project/HyDE
3. Finally, it will clone the Hyprdots repository and run the installation script.

From here on 'Dots' 'Dot Files' means Configurations.

$(tput setaf 3)Hyprdots-ctl is a CLI for Hyprdots.This aims to add patches 
for Hyprdots and address common Dots issues.
Also this is a USER specific helper, includes a control file for a user to preserve the USER preferences.
Please note that using these scripts may alter your Dot files.$(tput sgr0)

$(tput setaf 6)And wait, there's more!!! Checkout 'Hyprdots man' to see how you can manage your Hyprdots setup.$(tput sgr0)

HAVE A GOOD DAY!

Visit: https://github.com/kRHYME7/Hyprdots-ctl for more information.
$barLine
GREET

read -n 1 -s -r -p "[ENTER:yes ANY:no] Proceed? " key ; [[ -z "$key" ]] || exit 0 

# rm -fr "$CloneDir" || true
# git clone --depth 1 https://github.com/HyDE-Project/HyDE "$CloneDir"
cd "$CloneDir"/Scripts || exit 0
check_packages() {
  # Clear the install_pkg.lst file before we start
  : > ./install_pkg.lst

  # Variable to store the names of the unavailable packages
  unavailable_packages=""

# List of packages
dnf_lst='
pipewire
NetworkManager
network-manager-applet
bluez
bluez-utils
blueman
qt5-qtwayland
dunst
waybar
parallel
jq
ImageMagick
qt5-qtimageformats
kde-cli-tools
brightnessctl
pavucontrol
pamixer
nwg-look
Kvantum
qt5ct
firefox
kitty
neofetch
code
vim
ark
zsh
oh-my-zsh
zsh-theme-powerlevel10k
'

# Function to check and install packages
check_and_install() {
 while IFS= read -r package; do
   if dnf list --installed "$package"; then
     echo "$package is already installed on the system"
   elif dnf list --available "$package" ; then
     echo "$package is not installed, queuing for installation"
     echo "$package" >> ./install_pkg.lst
   else
     unavailable_packages+="$package \n"
   fi
 done <<< "$dnf_lst"

 # Print the names of the unavailable packages
 if [ -n "$unavailable_packages" ]; then
   echo -e "\n The following packages are not available: \n$unavailable_packages"
 fi
}

# Call the function
check_and_install

# Install the packages
if [ -f ./install_pkg.lst ]; then
 echo "Installing packages..."
 SUPER dnf install $(cat ./install_pkg.lst)
else
 echo "No packages to install."
fi
